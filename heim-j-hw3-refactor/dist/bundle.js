/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/audio.js":
/*!**********************!*\
  !*** ./src/audio.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyserNode: () => (/* binding */ analyserNode),\n/* harmony export */   audioCtx: () => (/* binding */ audioCtx),\n/* harmony export */   loadSoundFile: () => (/* binding */ loadSoundFile),\n/* harmony export */   makeDistortionCurve: () => (/* binding */ makeDistortionCurve),\n/* harmony export */   pauseCurrentSound: () => (/* binding */ pauseCurrentSound),\n/* harmony export */   playCurrentSound: () => (/* binding */ playCurrentSound),\n/* harmony export */   setVolume: () => (/* binding */ setVolume),\n/* harmony export */   setupWebaudio: () => (/* binding */ setupWebaudio),\n/* harmony export */   toggleDistortion: () => (/* binding */ toggleDistortion),\n/* harmony export */   toggleHighshelf: () => (/* binding */ toggleHighshelf),\n/* harmony export */   toggleLowshelf: () => (/* binding */ toggleLowshelf)\n/* harmony export */ });\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element, sourceNode, analyserNode, gainNode, distortionFilter, highBiquadFilter, lowBiquadFilter;\r\n\r\n// 3 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n    gain: .5,\r\n    numSamples: 256\r\n});\r\n\r\n// 4 - create a new array of 8-bit integers (0-255)\r\n// this is a typed array to hold the audio frequency data\r\nlet audioData = new Uint8Array(DEFAULTS.numSamples / 2);\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = (filePath) => {\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio();\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node\r\n    // note the UK spelling of \"Analyser\"\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    //create filters and distortion\r\n    highBiquadFilter = audioCtx.createBiquadFilter();\r\n    highBiquadFilter.type = \"highshelf\";\r\n\r\n    lowBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowBiquadFilter.type = \"lowshelf\";\r\n\r\n    distortionFilter = audioCtx.createWaveShaper();\r\n    distortionFilter.type = \"distortion\";\r\n\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(gainNode);\r\n    gainNode.connect(highBiquadFilter);\r\n    highBiquadFilter.connect(lowBiquadFilter);\r\n    lowBiquadFilter.connect(distortionFilter);\r\n    distortionFilter.connect(analyserNode);\r\n\r\n    //connect to destination\r\n    analyserNode.connect(audioCtx.destination);\r\n}\r\n\r\n//load\r\nconst loadSoundFile = (filePath) => {\r\n    element.src = filePath;\r\n}\r\n\r\n//play\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\n\r\n//pause\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\n\r\n//volume change\r\nconst setVolume = (value) => {\r\n    // make sure that it's a Number rather than a String\r\n    value = Number(value);\r\n    gainNode.gain.value = value\r\n}\r\n\r\n//change highShelf\r\nconst toggleHighshelf = (params = {}) => {\r\n    if (params.highshelf) {\r\n        highBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime); // we created the `biquadFilter` (i.e. \"treble\") node last time\r\n        highBiquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n    } else {\r\n        highBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\n//change lowShelf\r\nconst toggleLowshelf = (params = {}) => {\r\n    if (params.lowshelf) {\r\n        lowBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n        lowBiquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\r\n    } else {\r\n        lowBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\n//change distortion\r\nconst toggleDistortion = (params = {}) => {\r\n    if (params.distortion) {\r\n        distortionFilter.curve = null; // being paranoid and trying to trigger garbage collection\r\n        distortionFilter.curve = makeDistortionCurve(params.distortionAmount);\r\n    } else {\r\n        distortionFilter.curve = null;\r\n    }\r\n}\r\n\r\n//changes based on slider\r\nconst makeDistortionCurve = (amount = 20) => {\r\n    let n_samples = 256, curve = new Float32Array(n_samples);\r\n    for (let i = 0; i < n_samples; ++i) {\r\n        let x = i * 2 / n_samples - 1;\r\n        curve[i] = (Math.PI + amount) * x / (Math.PI + amount * Math.abs(x));\r\n    }\r\n    return curve;\r\n}\r\n\r\n//export\r\n\r\n\n\n//# sourceURL=webpack://heim-j-hw2/./src/audio.js?");

/***/ }),

/***/ "./src/load-json.js":
/*!**************************!*\
  !*** ./src/load-json.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadJson: () => (/* binding */ loadJson)\n/* harmony export */ });\nconst loadJson = () => {\r\n    const url = \"data/av-data.json\";\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onload = (e) => {\r\n        //console.log(`In onload - HTTP Status Code = ${e.target.status}`);\r\n\r\n        let json;\r\n        try {\r\n            json = JSON.parse(e.target.responseText)\r\n        } catch {\r\n            document.querySelector(\"#output\").innerHTML = \"BAD JSON\";\r\n            return;\r\n        }\r\n\r\n        const obj = json\r\n\r\n        let html = \"\";\r\n\r\n        html += `<h2>${obj.title = obj.title ? obj.title : \"No title found\"}</h2>`;\r\n        html += `<ol>${obj[\"songlist\"].map(w => `<li>${w}</li>`).join(\"\")}</ol>`;\r\n        html += `<p>${obj.instructions}</p>`\r\n\r\n        //for title of app\r\n        document.querySelector(\"title\").innerHTML = obj.title;\r\n\r\n        //for inside the output\r\n        document.querySelector(\"#output\").innerHTML = html;\r\n    }\r\n    xhr.onerror = e => console.log(`In onerror - HTTP Status Code = ${e.target.status}`)\r\n    xhr.open(\"GET\", url)\r\n    xhr.send();\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack://heim-j-hw2/./src/load-json.js?");

/***/ }),

/***/ "./src/loader.js":
/*!***********************!*\
  !*** ./src/loader.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.js */ \"./src/main.js\");\n\r\n\r\n//load canvas\r\n_main_js__WEBPACK_IMPORTED_MODULE_0__.init();\n\n//# sourceURL=webpack://heim-j-hw2/./src/loader.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _audio_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audio.js */ \"./src/audio.js\");\n/* harmony import */ var _visualizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualizer.js */ \"./src/visualizer.js\");\n/* harmony import */ var _load_json_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./load-json.js */ \"./src/load-json.js\");\n//imports\r\n\r\n\r\n\r\n\r\n\r\n//params object\r\nconst drawParams = {\r\n  showLine: false,\r\n  showBars: true,\r\n  showCircles: false,\r\n  showInvert: false,\r\n  showFireworks: true,\r\n  showTriangles: true,\r\n  highshelf: false,\r\n  lowshelf: false,\r\n  distortion: false,\r\n  toggleWave: false,\r\n\r\n  //set intial distortion\r\n  distortionAmount: 20\r\n}\r\n\r\n// 1 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n  sound1: \"media/music/Nocturne.mp3\"\r\n});\r\n\r\nconst init = () => {\r\n  _audio_js__WEBPACK_IMPORTED_MODULE_1__.setupWebaudio(DEFAULTS.sound1);\r\n  console.log(\"init called\");\r\n  //console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  let canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n  setupUI(canvasElement);\r\n\r\n  _visualizer_js__WEBPACK_IMPORTED_MODULE_2__.setupCanvas(canvasElement, _audio_js__WEBPACK_IMPORTED_MODULE_1__.analyserNode);\r\n\r\n  _load_json_js__WEBPACK_IMPORTED_MODULE_3__.loadJson();\r\n\r\n  loop();\r\n}\r\n\r\nconst setupUI = (canvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#btn-fs\");\r\n  const playButton = document.querySelector(\"#btn-play\");\r\n\r\n  // add .onclick event to button\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.goFullscreen(canvasElement);\r\n  };\r\n\r\n  //PLAY BUTTON\r\n  playButton.onclick = e => {\r\n    console.log(`audioCtx.state before = ${_audio_js__WEBPACK_IMPORTED_MODULE_1__.audioCtx.state}`)\r\n\r\n\r\n    //check if in suspend state (autoplay)\r\n    if (_audio_js__WEBPACK_IMPORTED_MODULE_1__.audioCtx.state == \"suspended\") {\r\n      _audio_js__WEBPACK_IMPORTED_MODULE_1__.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${_audio_js__WEBPACK_IMPORTED_MODULE_1__.audioCtx.state}`);\r\n    if (e.target.dataset.playing == \"no\") {\r\n      //if currently paused, play it\r\n      _audio_js__WEBPACK_IMPORTED_MODULE_1__.playCurrentSound();\r\n      e.target.dataset.playing = \"yes\";\r\n\r\n    } else {\r\n      _audio_js__WEBPACK_IMPORTED_MODULE_1__.pauseCurrentSound();\r\n      e.target.dataset.playing = \"no\";\r\n    }\r\n\r\n  };\r\n\r\n  //VOLUME SLIDER\r\n  //get references to them\r\n  let volumeSlider = document.querySelector(\"#slider-volume\");\r\n  let volumeLabel = document.querySelector(\"#label-volume\");\r\n\r\n  //change on input\r\n  volumeSlider.oninput = e => {\r\n    //set gain\r\n    _audio_js__WEBPACK_IMPORTED_MODULE_1__.setVolume(e.target.value);\r\n    //update value on label\r\n    volumeLabel.innerHTML = Math.round((e.target.value / 2 * 100));\r\n  };\r\n\r\n  //set initial\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  //TRACK SELECT\r\n  let trackSelect = document.querySelector(\"#select-track\");\r\n  //onchange event\r\n  trackSelect.onchange = e => {\r\n    _audio_js__WEBPACK_IMPORTED_MODULE_1__.loadSoundFile(e.target.value);\r\n    //pause current if playing\r\n    if (playButton.dataset.playing == \"yes\") {\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n  //CHECKBOX EVENTS\r\n  //reference from html\r\n  let lineCheck = document.querySelector(\"#cb-lines\")\r\n  let fireCheck = document.querySelector(\"#cb-fireworks\")\r\n  let triCheck = document.querySelector(\"#cb-triangles\")\r\n  let barCheck = document.querySelector(\"#cb-bars\")\r\n  let circleCheck = document.querySelector(\"#cb-circles\")\r\n  let invCheck = document.querySelector(\"#cb-invert\")\r\n\r\n  //start them checked\r\n  barCheck.checked = true;\r\n  fireCheck.checked = true;\r\n  triCheck.checked = true;\r\n\r\n  //line\r\n  lineCheck.onclick = () => {\r\n    if (lineCheck.checked) {\r\n      drawParams.showLine = true;\r\n    } else {\r\n      drawParams.showLine = false;\r\n    }\r\n  }\r\n\r\n  //bars\r\n  barCheck.onclick = () => {\r\n    if (barCheck.checked) {\r\n      drawParams.showBars = true;\r\n    } else {\r\n      drawParams.showBars = false;\r\n    }\r\n  }\r\n\r\n  //circles\r\n  circleCheck.onclick = () => {\r\n    if (circleCheck.checked) {\r\n      drawParams.showCircles = true;\r\n    } else {\r\n      drawParams.showCircles = false;\r\n    }\r\n\r\n  }\r\n\r\n  //invert\r\n  invCheck.onclick = () => {\r\n    if (invCheck.checked) {\r\n      drawParams.showInvert = true;\r\n    } else {\r\n      drawParams.showInvert = false;\r\n    }\r\n\r\n  }\r\n\r\n  //fireworks\r\n  fireCheck.onclick = () => {\r\n    if (fireCheck.checked) {\r\n      drawParams.showFireworks = true;\r\n    } else {\r\n      drawParams.showFireworks = false;\r\n    }\r\n\r\n  }\r\n\r\n  //triangles\r\n  triCheck.onclick = () => {\r\n    if (triCheck.checked) {\r\n      drawParams.showTriangles = true;\r\n    } else {\r\n      drawParams.showTriangles = false;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  //SOUND FILTERS\r\n  document.querySelector('#cb-highshelf').checked = drawParams.highshelf;\r\n  document.querySelector('#cb-lowshelf').checked = drawParams.lowshelf;\r\n  document.querySelector('#cb-distortion').checked = drawParams.distortion;\r\n\r\n  document.querySelector('#cb-highshelf').onchange = e => {\r\n    drawParams.highshelf = e.target.checked;\r\n    _audio_js__WEBPACK_IMPORTED_MODULE_1__.toggleHighshelf(drawParams);\r\n  };\r\n\r\n  document.querySelector('#cb-lowshelf').onchange = e => {\r\n    drawParams.lowshelf = e.target.checked;\r\n    _audio_js__WEBPACK_IMPORTED_MODULE_1__.toggleLowshelf(drawParams);\r\n  };\r\n\r\n  document.querySelector('#cb-distortion').onchange = e => {\r\n    drawParams.distortion = e.target.checked;\r\n    _audio_js__WEBPACK_IMPORTED_MODULE_1__.toggleDistortion(drawParams);\r\n  };\r\n\r\n  document.querySelector('#slider-distortion').value = drawParams.distortionAmount;\r\n  document.querySelector('#slider-distortion').onchange = e => {\r\n    drawParams.distortionAmount = Number(e.target.value);\r\n    _audio_js__WEBPACK_IMPORTED_MODULE_1__.toggleDistortion(drawParams);\r\n  };\r\n\r\n  //TOGGLE VISUALIZATION\r\n  document.querySelector('#select-visualizer').onchange = e => {\r\n    if (e.target.value == \"frequency\") {\r\n      drawParams.toggleWave = false;\r\n    } else {\r\n      drawParams.toggleWave = true;\r\n    }\r\n  }\r\n\r\n} // end setupUI\r\n\r\n//DATA VISULIZER\r\nconst loop = () => {\r\n  let fps = 60;\r\n  _visualizer_js__WEBPACK_IMPORTED_MODULE_2__.draw(drawParams, fps);\r\n  setTimeout(loop);\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack://heim-j-hw2/./src/main.js?");

/***/ }),

/***/ "./src/sprites.js":
/*!************************!*\
  !*** ./src/sprites.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FireWork: () => (/* binding */ FireWork),\n/* harmony export */   Triangle: () => (/* binding */ Triangle)\n/* harmony export */ });\n//mkae firework like shapes\r\nclass FireWork {\r\n    //construcor\r\n    constructor(centerX, centerY, add) {\r\n        this.centerX = centerX;\r\n        this.centerY = centerY;\r\n        this.add = add\r\n        this.n = 0;\r\n        this.divergence = 137.1;\r\n        this.c = 3;\r\n        this.radius = 2;\r\n    }\r\n    // calculate degrees\r\n    dtr(degrees) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n    //make the circles\r\n    drawCircle(ctx, x, y, radius, color) {\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n    //draw fireworks\r\n    draw(ctx) {\r\n\r\n        for (let i = 0; i < this.n; i++) {\r\n            let aFlower = i * this.dtr(137.1)\r\n            let rFlower = 2 * Math.sqrt(i);\r\n\r\n            //get X and Y\r\n            let x = rFlower * Math.cos(aFlower) + this.centerX;\r\n            let y = rFlower * Math.sin(aFlower) + this.centerY;\r\n\r\n            //draw the circles\r\n            let red = Math.round(255 * (1 - i / this.n));\r\n            let color = `rgb(${red}, 10, 100)`;\r\n            this.drawCircle(ctx, x, y, 1, color);\r\n        }\r\n\r\n    }\r\n    //add more dots with music\r\n    update(audioData) {\r\n        let add = 0\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            add += audioData[i];\r\n        }\r\n        let average = add / (audioData.length + this.add);\r\n        this.n = Math.floor(1000 * (average / 200) + 10);\r\n\r\n    }\r\n}\r\n\r\n//traingle class\r\nclass Triangle {\r\n    //constructor\r\n    constructor(x, y, add) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.add = add;\r\n        this.rotate = 0;\r\n    }\r\n    drawTriangle(ctx, x, y, size, color) {\r\n        //make height based on the size\r\n        //baied on pythogroean theroem\r\n        let height = Math.sqrt(2/3) * size;\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y - height / 2);\r\n        ctx.lineTo(x + size / 2, y + height / 2);\r\n        ctx.lineTo(x - size / 2, y + height / 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n    //draw the triangles\r\n    draw(ctx) {\r\n        let color = \"rgb(180, 10, 100)\"\r\n        //tranlsate and rotate triangle\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.rotate(this.rotate)\r\n        this.drawTriangle(ctx, 0, 0, this.add, color)\r\n        ctx.restore();\r\n\r\n    }\r\n    //rotate triangles with music\r\n    update(audioData) {\r\n        let speed = 0.1;\r\n        let audioRotate = audioData[0]/255 * speed;\r\n        this.rotate += audioRotate;\r\n\r\n       // this.rotate += speed;\r\n\r\n    }\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack://heim-j-hw2/./src/sprites.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLinearGradient: () => (/* binding */ getLinearGradient),\n/* harmony export */   getRandom: () => (/* binding */ getRandom),\n/* harmony export */   getRandomColor: () => (/* binding */ getRandomColor),\n/* harmony export */   goFullscreen: () => (/* binding */ goFullscreen),\n/* harmony export */   makeCircle: () => (/* binding */ makeCircle),\n/* harmony export */   makeColor: () => (/* binding */ makeColor),\n/* harmony export */   makeLine: () => (/* binding */ makeLine)\n/* harmony export */ });\nconst makeColor = (red, green, blue, alpha = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min, max) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor, 255 - floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\nconst getLinearGradient = (ctx, startX, startY, endX, endY, colorStops) => {\r\n  let lg = ctx.createLinearGradient(startX, startY, endX, endY);\r\n  for (let stop of colorStops) {\r\n    lg.addColorStop(stop.percent, stop.color);\r\n  }\r\n  return lg;\r\n};\r\n\r\nconst makeLine = (ctx, x, y, audioData, canvasWidth) => {\r\n  ctx.beginPath();\r\n  ctx.moveTo(x, y);\r\n  for (let i of audioData) {\r\n    ctx.lineTo(x, y - i);\r\n    x += (canvasWidth / (audioData.length - 50));\r\n  }\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n  ctx.restore();\r\n}\r\n\r\nconst makeCircle = (ctx, x, y, percent, radius) => {\r\n  ctx.beginPath();\r\n  ctx.fillStyle = makeColor(105, 4, 58, .5 - percent / 5);\r\n  ctx.arc(x, y, radius * percent, 0, 2 * Math.PI, false);\r\n  ctx.fill();\r\n  ctx.closePath();\r\n\r\n}\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element) => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  } else if (element.mozRequestFullscreen) {\r\n    element.mozRequestFullscreen();\r\n  } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n    element.mozRequestFullScreen();\r\n  } else if (element.webkitRequestFullscreen) {\r\n    element.webkitRequestFullscreen();\r\n  }\r\n  // .. and do nothing if the method is not supported\r\n};\r\n\r\n\n\n//# sourceURL=webpack://heim-j-hw2/./src/utils.js?");

/***/ }),

/***/ "./src/visualizer.js":
/*!***************************!*\
  !*** ./src/visualizer.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   draw: () => (/* binding */ draw),\n/* harmony export */   setupCanvas: () => (/* binding */ setupCanvas)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _sprites_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sprites.js */ \"./src/sprites.js\");\n\r\n\r\n\r\nlet ctx, canvasWidth, canvasHeight, analyserNode, audioData;\r\nlet fireworks = [];\r\nlet triangles = [];\r\n\r\nconst setupCanvas = (canvasElement, analyserNodeRef) => {\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\");\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n    // keep a reference to the analyser node\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n    \r\n    //push fireworks into the array\r\n    fireworks.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.FireWork(100, 100, -100))\r\n    fireworks.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.FireWork(240, 140, -60))\r\n    fireworks.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.FireWork(200, 340, 200))\r\n    fireworks.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.FireWork(450, 200, 400))\r\n    fireworks.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.FireWork(500, 100, 100))\r\n    fireworks.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.FireWork(600, 300, 900))\r\n\r\n    //push trianlges into the array\r\n    triangles.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.Triangle(770, 20,27))\r\n    triangles.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.Triangle(730, 30, 20))\r\n    triangles.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.Triangle(770, 60, 20))\r\n\r\n    triangles.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.Triangle(30, 530, 27))\r\n    triangles.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.Triangle(40, 490, 20))\r\n    triangles.push(new _sprites_js__WEBPACK_IMPORTED_MODULE_1__.Triangle(70, 520, 20))\r\n\r\n    console.log(triangles)\r\n}\r\n\r\nconst draw = (params = {}) => {\r\n    // 1 - populate the audioData array with the frequency data from the analyserNode\r\n    if (params.toggleWave) {\r\n        analyserNode.getByteTimeDomainData(audioData); //waveform data\r\n        // Initialize audioData with default values\r\n\r\n    } else {\r\n        analyserNode.getByteFrequencyData(audioData); //frequency data\r\n\r\n    }\r\n\r\n    // 2 - draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .5;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    //draw line\r\n    if (params.showLine) {\r\n        //line\r\n        ctx.save();\r\n        ctx.lineWidth = 3;\r\n        let x = -(canvasWidth / audioData.length);\r\n        let num = 0\r\n\r\n        //make the lines\r\n        for (let i = 0; i < 20; i++) {\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = \"rgb(199, 199, 199)\";\r\n            let y = num;\r\n            num += 40\r\n            _utils_js__WEBPACK_IMPORTED_MODULE_0__.makeLine(ctx, x, y, audioData, canvasWidth)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //draw bars\r\n    if (params.showBars) {\r\n\r\n        let margin = 2;\r\n        let screenWidthForBars = (canvasWidth - (audioData.length) * margin);\r\n        let barWidth = (screenWidthForBars / audioData.length) + 5;\r\n        let topSpacing = 275;\r\n\r\n        ctx.save();\r\n        //loop througbh data\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            let barX = margin + i * (barWidth + margin)\r\n            let barHeight = Math.max(audioData[i] + 20, 0);\r\n\r\n            let color = Math.round(255 * (i / (audioData.length - 50)));\r\n\r\n            ctx.fillStyle = `rgb(${color}, 10, 255, 1)`;\r\n            ctx.fillRect(barX, topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    //draw circles\r\n    if (params.showCircles) {\r\n        let maxRadius = canvasHeight / 20;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n\r\n        let x = _utils_js__WEBPACK_IMPORTED_MODULE_0__.getRandom(40, canvasWidth - 40);\r\n        let y = _utils_js__WEBPACK_IMPORTED_MODULE_0__.getRandom(40, canvasHeight - 40);\r\n\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            let percent = audioData[i] / 255;\r\n            let circleRadius = percent * maxRadius;\r\n\r\n            _utils_js__WEBPACK_IMPORTED_MODULE_0__.makeCircle(ctx, x, y, percent, circleRadius)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //make fireworks from class\r\n    if (params.showFireworks) {\r\n\r\n        for (let f of fireworks) {\r\n            f.draw(ctx);\r\n\r\n            f.update(audioData)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //make spinning triangles from class\r\n    if(params.showTriangles){\r\n        for(let t of triangles){\r\n            t.draw(ctx);\r\n\r\n            t.update(audioData);\r\n        }\r\n    }\r\n\r\n\r\n    let imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    let width = imageData.width;\r\n    // B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n    for (let i = 0; i < length; i++) {\r\n        // C) randomly change every 20th pixel to red\r\n\r\n        //invert\r\n        if (params.showInvert) {\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red; //set red\r\n            data[i + 1] = 255 - green //set green\r\n            data[i + 2] = 255 - blue //set blue\r\n            //data[1 +3] is alpha\r\n        }\r\n\r\n    } // end for\r\n\r\n    // D) copy image data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n\r\n}\r\n\r\n\n\n//# sourceURL=webpack://heim-j-hw2/./src/visualizer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/loader.js");
/******/ 	
/******/ })()
;